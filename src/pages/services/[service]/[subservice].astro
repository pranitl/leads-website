---
import Layout from '../../../layouts/Layout.astro';
import LeadCaptureSection from '../../../components/LeadCaptureSection.astro';
import FAQList from '../../../components/FAQList.astro';
import { getCollection } from 'astro:content';
import { toLeadFormServiceOptions } from '../../../lib/services';

export async function getStaticPaths() {
  const services = await getCollection('services');
  const subservices = await getCollection('subservices');

  const serviceOptions = toLeadFormServiceOptions(services);

  return subservices.map((sub) => {
    const parent = services.find((svc) => svc.data.slug === sub.data.service);
    return {
      params: { service: sub.data.service, subservice: sub.data.slug },
      props: {
        parent,
        sub,
        allServices: serviceOptions,
      },
    };
  });
}

const { parent, sub, allServices } = Astro.props;
const subData = sub.data;
const serviceName = parent?.data.name ?? 'Service';
const parentSlug = parent?.data.slug ?? 'service';

const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'Service',
  name: subData.title,
  provider: {
    '@type': 'Organization',
    name: 'Austin Home Renovation Hub',
  },
  areaServed: 'United States',
  description: subData.intro,
};

const illustrationMap: Record<string, string> = {
  landscaping: '/images/placeholders/home-hero-1.svg',
  hardscaping: '/images/placeholders/service-card.svg',
  'closet-interior': '/images/placeholders/home-hero-2.svg',
};

const illustration = illustrationMap[parentSlug] ?? '/images/placeholders/service-card.svg';
---

<Layout title={`${subData.title} | ${serviceName}`} description={subData.intro ?? `${subData.title} specialists`} structuredData={structuredData}>
  <LeadCaptureSection
    services={allServices}
    eyebrow={serviceName}
    title={subData.title}
    description={subData.intro}
    formClassName="shadow-card"
  >
    <div class="overflow-hidden rounded-2xl border border-neutral-200 bg-white">
      <img src={illustration} alt={`${subData.title} inspiration`} class="h-48 w-full object-cover" loading="lazy" />
    </div>
    {subData.avgCost ? (
      <div class="flex items-center gap-3 rounded-2xl border border-neutral-200 bg-white/90 p-4 text-sm text-neutral-700 shadow-card">
        <span class="rounded-full bg-brand-100 px-3 py-1 font-semibold text-brand-700">Typical investment</span>
        ${subData.avgCost.min.toLocaleString()} - ${subData.avgCost.max.toLocaleString()}
        {subData.avgCost.notes && <span class="text-xs text-neutral-500">({subData.avgCost.notes})</span>}
      </div>
    ) : null}
    {subData.highlights?.length ? (
      <ul class="grid gap-3 sm:grid-cols-2">
        {subData.highlights.map((highlight) => (
          <li class="rounded-2xl border border-neutral-200 bg-white/90 p-4 text-sm text-neutral-700 shadow-card">
            {highlight}
          </li>
        ))}
      </ul>
    ) : null}
  </LeadCaptureSection>

  <section class="container space-y-12 py-16">
    <FAQList items={subData.faqs ?? parent?.data.faqs ?? []} />
  </section>
</Layout>
